import React, {Component} from "react";import './Wrap.sass';import Elem from "../Elem/Elem";import Button from "../PlayBtn/Btn";import Modal from "../winnerModal/Modal";import Infinite from "../Infinite/Infinite";//load main imagesimport sym1 from "../../assets/Images/SYM1.png";import sym3 from "../../assets/Images/SYM3.png";import sym4 from "../../assets/Images/SYM4.png";import sym5 from "../../assets/Images/SYM5.png";import sym6 from "../../assets/Images/SYM6.png";import sym7 from "../../assets/Images/SYM7.png";//load long imagesimport mix1 from "../../assets/Images/mix1.png";import mix2 from "../../assets/Images/mix2.png";import mix3 from "../../assets/Images/mix3.png";class Wrapper extends Component {  constructor(props) {    super(props);    this.state = {      arrayImg: [sym1, sym3, sym4, sym5, sym6, sym7],      index: [null, null, null],      count: 0,      scrollElem: null,      hideElems: {},      arrayBg: [mix1, mix2, mix3],      showModal: false,      amount: 100,    }  }  //load main screen  componentDidMount() {    this.getImage();  }  getImage = () => {    let idx1 = this.getInterval(0, 5);    let idx2 = this.getInterval(0, 5);    let idx3 = this.getInterval(0, 5);    this.setState({      index: [idx1, idx2, idx3]    });    if (idx1 === idx2 && idx2 === idx3 && idx1 === idx2) {      setTimeout(() => {        this.setState((oldState) => ({          showModal: true,          amount: oldState.amount + 100        }));      }, 4000);    }  };  refreshImage = () => {    this.animationProcessStart();    let idx1 = this.getInterval(0, 5);    let idx2 = this.getInterval(0, 5);    let idx3 = this.getInterval(0, 5);    this.setState((state) => ({      index: [idx1, idx2, idx3],      count: state.count + 1,      amount: state.amount - 5,    }));    if (idx1 === idx2 && idx2 === idx3 && idx1 === idx2) {      setTimeout(() => {        this.setState((oldState) => ({          showModal: true,          amount: oldState.amount + 100        }));      }, 4000);    }    //if count five times start win combination    if(this.state.count === this.getInterval(1, 5)) {      this.winCombination();    }    //change count if it over five times    if(this.state.count === 5) {      this.setState({        count: 0,      });    }    this.animationProcessEnd();  };  winCombination = () => {    let win1, win2,win3;    let wait = new Promise((resolve, reject) => {      setTimeout(() => {        resolve();      }, 4000);    });    win1 = win2 = win3 = this.getInterval(0, 5);    this.setState(({      index: [win1, win2, win3],      count: 0,    }));    wait.then(() => {      this.setState((oldState) => ({        showModal: true,        amount: oldState.amount + 100      }));    });  };  closeModal = () => {    this.setState({      showModal: false    });  };  animationProcessStart = () => {    let startAnimate = new Promise((resolve, reject) => {      resolve();    });    startAnimate.then(() => {      let elem = [];      let options = {};      // create inline react styles for speed animation and change images in scroll animation component      for (let i = 0; i < 3; i ++) {        options = {                    animation: `${i + 5}s scroll infinite linear`,                    backgroundImage: `url(${this.state.arrayBg[i]})`                  };        //add scroll animation component        elem.push(          <div className="Box" key={this.getInterval(0, 10)}>            <Infinite options={options} />          </div>        )      }      this.setState((state) => ({          scrollElem: elem,          hideElems: {display: 'none'}        }));    });  };  animationProcessEnd = () => {    let endAnimate = new Promise((resolve, reject) => {     setTimeout(() => {       resolve();     },3000)   });   endAnimate.then(() => {     // delete animation components     this.setState((state) => ({       scrollElem: state.scrollElem.splice(3, 0),       hideElems: {display: 'block'}     }));   });  };  // get random interval and return random number  getInterval = (min, max) => {    min = Math.ceil(min);    max = Math.floor(max);    return Math.floor(Math.random() * (max - min + 1)) + min;  };  // add three components scroll animation to method getComponent  renderScrollElem = (idx) =>  {    if(this.state.scrollElem !== null) {     return  this.state.scrollElem[idx]    }  };  getComponent = ()  => {    let elements = [];    for(let i = 0; i < 3; i++) {      //create template component      elements.push(<div className="Wrapper__Elem" key={i}>        <Elem getImage={this.state.arrayImg[this.state.index[i]]} getInterval={this.getInterval} hide={this.state.hideElems} />          {            this.renderScrollElem(i)          }      </div>)    }    return elements;  };  render() {    return(      <div className="Wrapper">        <div className="Wrapper__Body">           { this.getComponent()}            <Button refreshImage={this.refreshImage} />        </div>        <div className="Wrapper__Account">          <div className="Wrapper__Info"> Amount: <span className="Wrapper__Color"> {this.state.amount} </span></div>        </div>        <Modal show={this.state.showModal} hide={this.closeModal}/>      </div>    )  }}export default Wrapper;